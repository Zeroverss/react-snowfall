{"version":3,"file":"Snowflake.js","names":["_reactFastCompare","_interopRequireDefault","require","_utils","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","minLen","_arrayLikeToArray","n","toString","call","slice","name","Array","from","test","iter","isArray","len","i","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","configurable","writable","_toPropertyKey","key","_createClass","protoProps","staticProps","value","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","defaultConfig","exports","color","radius","speed","wind","changeFrequency","rotationSpeed","opacity","Snowflake","canvas","config","updateConfig","_this$config","params","x","random","offsetWidth","y","offsetHeight","rotation","nextSpeed","nextWind","nextRotationSpeed","framesSinceLastUpdate","selectImage","images","image","randomElement","previousConfig","isEqual","updateTargetParams","update","framesPassed","_this$params","lerp","getImageOffscreenCanvas","size","_sizes$size","HTMLImageElement","loading","sizes","offscreenCanvases","get","set","_canvas$getContext","document","createElement","width","height","getContext","drawImage","draw","ctx","setTransform","Math","ceil","rotate","PI","globalAlpha","beginPath","arc","fillStyle","hexToRGB","closePath","fill","WeakMap","_default"],"sources":["../src/Snowflake.ts"],"sourcesContent":["import isEqual from 'react-fast-compare'\r\nimport { hexToRGB, lerp, random, randomElement } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n  /** The minimum and maximum opacity of the snowflake */\r\n  opacity: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n  opacity: [1, 1],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n  opacity: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed, opacity } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n      opacity: random(...opacity),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (canvas.offsetWidth + radius * 2)\r\n    if (this.params.x > canvas.offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (canvas.offsetHeight + radius * 2)\r\n    if (this.params.y > canvas.offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (this.image) {\r\n      // ctx.save()\r\n      // ctx.translate(this.params.x, this.params.y)\r\n      ctx.setTransform(1, 0, 0, 1, this.params.x, this.params.y)\r\n\r\n      const radius = Math.ceil(this.params.radius)\r\n      ctx.rotate((this.params.rotation * Math.PI) / 180)\r\n      ctx.globalAlpha = this.params.opacity\r\n      ctx.drawImage(\r\n        this.getImageOffscreenCanvas(this.image, radius),\r\n        -Math.ceil(radius / 2),\r\n        -Math.ceil(radius / 2),\r\n        radius,\r\n        radius,\r\n      )\r\n\r\n      // ctx.restore()\r\n    } else {\r\n      ctx.beginPath()\r\n      ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = hexToRGB(this.config.color, this.params.opacity)\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"mappings":"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"}