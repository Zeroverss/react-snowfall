{"version":3,"file":"utils.js","names":["random","min","max","randomNumber","Math","Number","isInteger","floor","lerp","start","end","normal","getSize","element","height","width","offsetHeight","offsetWidth","randomElement","items","index","length","hexToRGB","hex","alpha","r","parseInt","slice","g","b"],"sources":["../src/utils.ts"],"sourcesContent":["/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n\r\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\r\nexport function randomElement<T>(items: T[]): T {\r\n  const index = Math.floor(Math.random() * items.length)\r\n  return items[index]\r\n}\r\n\r\nexport function hexToRGB(hex: string, alpha: number) {\r\n  const r = parseInt(hex.slice(1, 3), 16),\r\n    g = parseInt(hex.slice(3, 5), 16),\r\n    b = parseInt(hex.slice(5, 7), 16)\r\n\r\n  if (alpha) {\r\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')'\r\n  } else {\r\n    return 'rgb(' + r + ', ' + g + ', ' + b + ')'\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,MAAMA,CAACC,GAAW,EAAEC,GAAW,EAAU;EACvD,IAAMC,YAAY,GAAGC,IAAI,CAACJ,MAAM,CAAC,CAAC,IAAIE,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG;EAE1D,IAAI,CAACI,MAAM,CAACC,SAAS,CAACL,GAAG,CAAC,IAAI,CAACI,MAAM,CAACC,SAAS,CAACJ,GAAG,CAAC,EAAE;IACpD,OAAOC,YAAY;EACrB,CAAC,MAAM;IACL,OAAOC,IAAI,CAACG,KAAK,CAACJ,YAAY,CAAC;EACjC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,IAAIA,CAACC,KAAa,EAAEC,GAAW,EAAEC,MAAc,EAAE;EAC/D,OAAO,CAAC,CAAC,GAAGA,MAAM,IAAIF,KAAK,GAAGE,MAAM,GAAGD,GAAG;AAC5C;;AAEA;AACA;AACA;AACA;AACO,SAASE,OAAOA,CAACC,OAA4B,EAAE;EACpD,IAAI,CAACA,OAAO,EAAE,OAAO;IAAEC,MAAM,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC;EAE5C,OAAO;IACLD,MAAM,EAAED,OAAO,CAACG,YAAY;IAC5BD,KAAK,EAAEF,OAAO,CAACI;EACjB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAAIC,KAAU,EAAK;EAC9C,IAAMC,KAAK,GAAGhB,IAAI,CAACG,KAAK,CAACH,IAAI,CAACJ,MAAM,CAAC,CAAC,GAAGmB,KAAK,CAACE,MAAM,CAAC;EACtD,OAAOF,KAAK,CAACC,KAAK,CAAC;AACrB;AAEO,SAASE,QAAQA,CAACC,GAAW,EAAEC,KAAa,EAAE;EACnD,IAAMC,CAAC,GAAGC,QAAQ,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACrCC,CAAC,GAAGF,QAAQ,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACjCE,CAAC,GAAGH,QAAQ,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAEnC,IAAIH,KAAK,EAAE;IACT,OAAO,OAAO,GAAGC,CAAC,GAAG,IAAI,GAAGG,CAAC,GAAG,IAAI,GAAGC,CAAC,GAAG,IAAI,GAAGL,KAAK,GAAG,GAAG;EAC/D,CAAC,MAAM;IACL,OAAO,MAAM,GAAGC,CAAC,GAAG,IAAI,GAAGG,CAAC,GAAG,IAAI,GAAGC,CAAC,GAAG,GAAG;EAC/C;AACF"}